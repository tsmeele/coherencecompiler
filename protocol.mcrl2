%-----
% Coherence model Global and Local Language
% 2022.08 TSM
%
sort RoleName = struct b|R0|R3; 
sort Value = struct Lock|Unlock|Ack|zero|V1|V2|V4|V6|V7|V8;
sort RequesterRole = RoleName;
sort FromRole = RoleName;
sort Attribute = Nat;
sort AttrMap = Attribute -> Value;
sort Condition = struct EQ|NEQ;
sort LockStatusMap = Attribute -> Bool;
sort LockHolderMap = Attribute -> RoleName;

act  send,enqueue,syncCoherence,send',
     receive,dequeue,updateProp,updateCoh,receive' : FromRole # RoleName # Attribute # Value;
     lastRoleAttr : RoleName # Attribute;  
     lastEq : Bool;
     test, testProp, syncCoherenceOnTest,test' : Condition # RoleName # Attribute # Attribute;
     

proc

% Roles carry process attributes that can be updated upon a receive
  Role'(me:RoleName,props:AttrMap, lockStatusMap:LockStatusMap, lockHolderMap:LockHolderMap) = 
     sum from:RoleName, attr:Attribute, v:Value . (
         (me != from) -> ( 

                        % unlock request for unlocked attr or for locked attr where role is the lock holder
              (v == Unlock && ( (lockStatusMap(attr) && lockHolderMap(attr) == from) || 
                                 lockStatusMap(attr) == false) ) -> 
                         updateProp(from,me,attr,v).Role'(me,props,lockStatusMap[attr->false],lockHolderMap) + 

                        % lock request and attribute is not yet locked or role is the lock holder (and locks again)
              (v == Lock && (lockStatusMap(attr)==false || (lockStatusMap(attr) && lockHolderMap(attr)==from) ) ) ->
                         updateProp(from,me,attr,v).Role'(me,props,lockStatusMap[attr->true],lockHolderMap[attr->from]) +

                        % acknowledge message (in response to lock/unlock request)
              (v == Ack) ->
                         updateProp(from,me,attr,v).Role'(me,props,lockStatusMap,lockHolderMap) +
              (v != Ack && v != Unlock && v != Lock) -> ( 

                        % attribute data update for unlocked attr or attr where role is lock holder
                   ( (lockStatusMap(attr) && lockHolderMap(attr) == from) || lockStatusMap(attr) == false ) ->
                         updateProp(from,me,attr,v).Role'(me,props[attr->v],lockStatusMap,lockHolderMap) 
              )
         ) 
     ) +
 sum attrA,attrB:Attribute . ( 
     (attrA != attrB && props(attrA) != zero && props(attrB) != zero) -> 
          (props(attrA) == props(attrB)) -> (testProp(EQ,me,attrA,attrB). 
                     Role'(me,props,lockStatusMap,lockHolderMap)) 
	       <> (testProp(NEQ,me,attrA,attrB). 
                     Role'(me,props,lockStatusMap,lockHolderMap)) 
    ); 


% Channels are implementation of asynchronous communication, maximum queue size 5 is arbitrary
% The queue holds (attribute,value) pairs (stored in separate lists).

  Channel'(from,to:RoleName,queueA:List(Attribute),queueV:List(Value),size:Int) =
     sum attr:Attribute,v:Value . (
         (size < 5) -> enqueue(from,to,attr,v).
                          Channel'(from,to,queueA <| attr, queueV <| v, succ(size)) ) +
         (size > 0) -> dequeue(from,to,head(queueA), head(queueV)).
                          Channel'(from,to,tail(queueA),tail(queueV), pred(size) 
     );


% Coherence' is a process that maintains the global coherence property 'last'
% In addition it acts as a probe, to report coherence status information (via actions):
%   lastRoleAttr(role,attribute)  : references the attribute that has received a new value
%   lastEq(boolean) : true if the data values of the monitored attributes are equal (after a receive action)
% Note that Coherence' is synchronized upon both send and receive. 
% Further actions are blocked until the actions of Coherence' are done. 
% This behavior ensures that the next transition after lastRoleAttr is always a lastEq action 

  Coherence'(role1,role2:RoleName,attr1,attr2:Attribute,value1,value2:Value,
             lastRole:RoleName,lastAttr:Attribute) =    % lastX state included for monitoring during simulation

            % test case: just synchronize on action and keep same state 
sum condition:Condition,from:RoleName,attrA,attrB:Attribute . ( 
   syncCoherenceOnTest(condition,from,attrA,attrB).
         Coherence'(role1,role2,attr1,attr2,value1,value2,lastRole,lastAttr)
) + 
sum from,to:RoleName,attr:Attribute,v:Value . (

            % send case: just synchronize on action and keep same state
   syncCoherence(from,to,attr,v).
         Coherence'(role1,role2,attr1,attr2,value1,value2,lastRole,lastAttr) +

            % special receive cases: received value is related to an (un)lock request
           % we synchronize and keep same state
  (v == Lock || v == Unlock || v == Ack) -> updateCoh(from,to,attr,v) .
           Coherence'(role1,role2,attr1,attr2,value1,value2,lastRole,lastAttr) +
  (v != Lock && v != Unlock && v != Ack) -> (

    % all other receive cases, we need to update coherence state information:

            % receive case 1: the attribute of role1 receives a new value
   (to == role1 && attr == attr1) -> updateCoh(from,to,attr,v).   
            lastRoleAttr(to,attr).lastEq(v==value2).     
            Coherence'(role1,role2,attr1,attr2,v,value2,to,attr) +

             % receive case 2: the attribute of role2 receives a new value
    (to == role2 && attr == attr2) -> updateCoh(from,to,attr,v).
             lastRoleAttr(to,attr).lastEq(v==value1).
             Coherence'(role1,role2,attr1,attr2,value1,v,to,attr) +

             % receive case 3: some other role receives a new value
    ( (to != role1 || attr != attr1) && (to != role2 || attr != attr2) ) -> updateCoh(from,to,attr,v).
             lastRoleAttr(to,attr).lastEq(value1==value2).
             Coherence'(role1,role2,attr1,attr2,value1,value2,to,attr)

) );

% Data transfer 'Cpq' is a basic construct of our global language:  Cpq --send--> Fpq --receive--> 1
% mcrl2 operators (sequential,option,parallel,recursion) are used to implement compositional constructs
% Our local language uses 'send' and 'receive' as its basic constructs. Tau is supported natively by mcrl2.
    
  C(from:RoleName,to:RoleName,attr:Attribute, v:Value) = 
       send(from,to,attr,v).receive(from,to,attr,v); 

% lock and unlock communications consist of a request and a response (acknowledge)
% NB: the ack msg is targeted at a role and includes a dummy attribute '0'
  lock(from:RoleName,to:RoleName,attr:Attribute) =
       C(from,to,attr,Lock).C(to,from,0, Ack);

  unlock(from:RoleName,to:RoleName,attr:Attribute) =
       C(from,to,attr,Unlock).C(to,from,0,Ack);

% ------------
P5R3 = (tau.(receive(R0,R3,0,V1))+tau.(send(R3,R0,0,V1)));
P5R0 = (test(EQ,R0,0,1).(send(R0,R3,0,V1))+test(NEQ,R0,0,1).(receive(R3,R0,0,V1)));
joinedprotocol = P5R3||P5R0;

% ------------


% shorthands added to beautify init process ;)

  Role(role:RoleName) = Role'(role,lambda n:Attribute . zero, lambda n:Attribute . false, lambda n:Attribute . role);
  Chan(from,to:RoleName) = Channel'(from,to,[],[],0);
  Coherence(role1,role2:RoleName, attr1,attr2:Nat) = Coherence'(role1,role2,attr1,attr2,zero,zero,b,0);


init

  allow(
     { send', receive', test', lastRoleAttr,lastEq},
     comm( {

        test|testProp|syncCoherenceOnTest -> test',
        send|enqueue|syncCoherence -> send', receive|dequeue|updateProp|updateCoh -> receive'},

        % processes that occur in every system:
Coherence(R0,R3,0,0) ||
        % processes that are protocol-specific:
Role(b) || Role(R0) || Chan(R0,R3) || Role(R3) || Chan(R3,R0) ||
joinedprotocol 
) );%-----
